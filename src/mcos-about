#!/usr/bin/python3
from typing import OrderedDict
import gi, json, os, subprocess, re, sys
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GdkPixbuf, Gdk

# Load CSS
css = ''
css_provider = Gtk.CssProvider()
css_provider.load_from_data(css)
context = Gtk.StyleContext()
screen = Gdk.Screen.get_default()
context.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

class MainWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="About this PC")
        self.set_resizable(False)
        
        # Add a custom headerbar
        self.hb = Gtk.HeaderBar()
        self.hb.props.show_close_button = True
        self.set_titlebar(self.hb)

        # Add a stack and stack switcher
        self.stack = Gtk.Stack()
        self.add(self.stack)
        self.stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        self.stack.set_transition_duration(500)

        self.stack_sw = Gtk.StackSwitcher()
        self.stack_sw.set_stack(self.stack)
        self.hb.set_custom_title(self.stack_sw)

        # Initialize the "Overview" tab
        self.overview_init()
        
        # Initialize the "Displays" tab
        self.display_init()
        # Initialize the "Storage" tab
        self.storage_init()
        # Initialize the "Support" tab
        self.support_init()
        # Initialize the "Service" tab
        self.service_init()

    def overview_init(self):
        # Load information from json
        with open("overview-info.json", mode="rt") as f:
            conf = json.loads(f.read())

        # Horizontal box (2 col: distro image and info)
        overview_layout = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=conf["logo_space"])
        self.stack.add_titled(overview_layout, "overview_layout", "Overview")

        # Vert box (3 rows: distro_info, system_info, addi_btn)
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=conf["section_space"])
        
        distro_info =  Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        system_info = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        addi_btn = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)

        # Set alignments
        distro_info.props.halign = system_info.props.halign = addi_btn.props.halign = Gtk.Align.START

        # Initialize distro info
        distro_name = Gtk.Label()
        distro_name.set_markup(conf["distro_markup"])
        distro_name.props.halign = Gtk.Align.START

        distro_ver = Gtk.Label(label=conf["distro_ver"])
        distro_ver.props.halign = Gtk.Align.START

        distro_info.pack_start(distro_name, False, False, 0)
        distro_info.pack_start(distro_ver, False, False, 0)

        # Initialize system info
        FIELD_SP = 20
        hostname = Gtk.Label(label=conf["hostname"])
        hostname.props.halign = Gtk.Align.START
        system_info.pack_start(hostname, False, False, 0)

        info_dict = {"Processor": conf["cpu"], "Memory": conf["memory"], "Startup Disk": conf["startup_disk"], "Graphics": conf["graphics"], "Serial Number": conf["serial_num"]}
        for key in info_dict:
            line = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=FIELD_SP)

            property_name = Gtk.Label()
            property_name.set_markup(f"<span font_weight='bold'>{key}</span>")
            property_name.props.halign = Gtk.Align.START

            line.pack_start(property_name, False, False, 0)
            line.pack_start(Gtk.Label(label=info_dict[key]), False, False, 0)
            line.props.halign = Gtk.Align.START
            system_info.pack_start(line, False, False, 0)
        
        # Initialize additional buttons
        sys_report_btn = Gtk.Button(label="System Report...")
        software_upd_btn = Gtk.Button(label="Software Update...")
        addi_btn.pack_start(sys_report_btn, False, False, 0)
        addi_btn.pack_start(software_upd_btn, False, False, 0)

        # Pack distro_info, system_info, addi_btn into vbox
        vbox.pack_start(distro_info, True, True, 0)
        vbox.pack_start(system_info, True, True, 0)
        vbox.pack_start(addi_btn, True, True, 0)

        # Intialize distro image
        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(
            filename=conf["distro_image_path"], 
            width=conf["distro_image_size"][0], 
            height=conf["distro_image_size"][1], 
            preserve_aspect_ratio=True)

        distro_img = Gtk.Image.new_from_pixbuf(pixbuf)

        overview_layout.pack_start(distro_img, True, True, 0)
        overview_layout.pack_start(vbox, True, True, 0)

        overview_layout.props.margin_start = conf["overview_margins"][0]
        overview_layout.props.margin_end = conf["overview_margins"][1]
        overview_layout.props.margin_top = conf["overview_margins"][2]
        overview_layout.props.margin_bottom = conf["overview_margins"][3]
    
    def display_init(self):
        display_layout = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        display_layout.pack_start(Gtk.Label(label="Under development"), True, True, 0)
        self.stack.add_titled(display_layout, "display_layout", "Display")
    def support_init(self):
        support_layout = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        support_layout.pack_start(Gtk.Label(label="Under development"), True, True, 0)
        self.stack.add_titled(support_layout, "support_layout", "Support")
    def storage_init(self):
        storage_layout = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        storage_layout.pack_start(Gtk.Label(label="Under development"), True, True, 0)
        self.stack.add_titled(storage_layout, "storage_layout", "Storage")
    def service_init(self):
        service_layout = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        service_layout.pack_start(Gtk.Label(label="Under development"), True, True, 0)
        self.stack.add_titled(service_layout, "service_layout", "Service")


clrscr = lambda: print(chr(27) + "[2J")
get_sys_stdout = lambda cmd: subprocess.check_output(cmd, shell=True)

def config_confirm():
    usr_input = input("Have you satisfied with the result? [Y/n]").lower()
    if usr_input in ["", "y"]:
        return True
    if usr_input == "n":
        return False
    else:
        input("You entered an invalid option. This  section's configuration will restart.\nPress any key to continue.")
        return False

def start_configuration():
    # Dump empty data
    with open("overview-info.json", mode="wt") as f:
        f.write()
        
    json_data = {
        "distro_image_path": "tux-logo.png",
        "distro_image_size": [160, 160],
        "distro_markup": "",
        "distro_ver": "",
        "hostname": "",
        "cpu": "",
        "memory": "",
        "startup_disk": "",
        "graphics": "",
        "serial_num": "",
        "overview_margins": [60, 60, 60, 60],
        "section_space": 20,
        "logo_space": 60,
        "system_info_command": "",
        "software_update_command": "",
        "font-family": None
    }

    clrscr()
    print("Now we will go through several steps to generate your system info (to match the macOS style).")
    print("Please ensure that you have all the dependencies installed before continuing: neofetch, dmidecode.")
    print("Works only on Linux\n")
    input("Press any key when you are ready.")


    # Call neofetch and parse info
    neofetch_output = get_sys_stdout("/usr/bin/neofetch --off --color_blocks=off").decode("utf-8")
    ansi_escape = re.compile(r"\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])")
    neofetch_output = ansi_escape.sub("", neofetch_output)
    neofetch_output = neofetch_output.replace("\r\n", "\n")
    neofetch_output = neofetch_output.split("\n")
    neofetch_sys_info = {}
    
    for line in neofetch_output:
        line = line.strip().split(":")
        if (len(line) >= 2):
            neofetch_sys_info[line[0].strip()] = ":".join(line[1:None])

    while True:
        clrscr()
        print("Let's start with your system model.")

        if "Host" not in neofetch_sys_info or input("Do you want to enter your own system model? [y/n]: ").lower().strip() == "y":
            json_data["hostname"] = input("The program cannot detect your system model. Please enter one of your choice: ")
        else:
            print("System model detected.")
            json_data["hostname"] = neofetch_sys_info["Host"]
        print("System model:", json_data["hostname"])

        if (config_confirm()):
            break

    while True:
        clrscr()
        print("Configuring your distro name and version.")
        print("The distro name will be displayed in two parts: the bold part and the non-bold part (better visualized on the github repo or any macOS 'About this Mac' screen)")
        print("For distros that have a codename (e.g. Ubuntu Focal Fossa), the bold part should be 'Ubuntu' and the other should be 'Focal Fossa' (without quotes).")
        
        if input("\nDo you want to enter it by yourself (or let the script detect automatically)? [y/N]: ").lower() == "y":      
            part1 = input("Enter the bold part.\nIf you wish there is a white space between two parts, please include one as well: ")
            part2 = input("Enter the non-bold part: ")
            json_data["distro_ver"] = input("Enter your distro version: ")
        else:
            os_release_output = get_sys_stdout("cat /etc/os-release").decode("utf-8")
            os_release_output = os_release_output.replace('"', '').replace("\r\n", "\n").split("\n")
            os_release = {}
            for line in os_release_output:
                line = line.split("=")
                if (len(line) == 2):
                    os_release[line[0].upper()] = line[1]
            
            part1 = os_release["NAME"]
            if "VERSION" in os_release:
                json_data["distro_ver"] = os_release["VERSION"]
            else:
                json_data["distro_ver"] = neofetch_sys_info["Kernel"]

            if "VERSION_CODENAME" in os_release:
                part2 = os_release["ERSION_CODENAME"]
            else:
                part2 = ""

            print("\nDetected information")
            print("Distro name:", part1)
            print("Version codename:", part2)
            print("Distro version:", json_data["distro_ver"])

        json_data["distro_markup"] = f"<span font-size='xx-large'><span font-weight='bold'>{part1}</span>{part2}</span>"

        if (config_confirm()):
            break
    
    json_data["cpu"] = " ".join([x.strip() for x in reversed(neofetch_sys_info["CPU"].split("@"))])

    clrscr()
    print("Now we will configure your RAM info. \nPlease ensure that you have dmidecode installed and accessible from PATH before continuing. Running dmidecode will require root access.")
    dmid_output = get_sys_stdout("sudo dmidecode --type memory").decode("utf-8")
    dmid_output = dmid_output.replace("\t", "").replace("\r\n", "\n").split("\n")

    ram_size = 0
    ram_unit = ""
    ram_bus = ""
    ram_technology = ""

    for line in dmid_output:
        line = [x.strip() for x in line.strip().split(":")]

        # Calculate total RAM size in GB first
        if line[0] == "Size":
            s = line[1].split()
            if (s[1] == "GB"):
                ram_size += float(s[0])
            elif (s[1] == "MB"):
                ram_size += float(s[0])/1000
            elif (s[1] == "TB"):
                ram_size += float(s[0])*1000
        
        if ram_size < 1:
            ram_size *= 1000
            ram_unit = "MB"
        elif ram_size > 1000:
            ram_size /= 1000
            ram_unit = "TB"
        else:
            ram_unit = "GB"
        
        # Check RAM bus
        if line[0] == "Speed":
            ram_bus = line[1].replace("MT/s", "MHz")
        
        # Check RAM technology
        if line[0] == "Type":
            ram_technology = line[1]
    
    json_data["memory"] = str(ram_size) + " " + ram_unit + " " + ram_bus + " " + ram_technology

    print(f"Your detected RAM info: {json_data['memory']}.\nIf it is incorrect, you can manually edit it later in ~/.local/share/mcos-about/overview-info.json.")
    input("Press any key to continue...")

    lsblk_output = get_sys_stdout("lsblk -o mountpoint,name,label --list | grep /").decode("utf-8").replace("\r\n", "\n").split("\n")
    for line in lsblk_output:
        line = line.split()
        if line[0] == "/":
            if (len(line) >= 3):
                json_data["startup_disk"] = " ".join(line[2:None])
            else:
                json_data["startup_disk"] = line[1]

    json_data["graphics"] = neofetch_sys_info["GPU"]

    json_data["serial_num"] = get_sys_stdout(r"sudo dmidecode --type baseboard | grep Serial | sed 's/^[ \t]*Serial Number: //;s/$[\n]//'").decode("utf-8")

    with open("overview-info.json", mode="wt") as f:
        json.dump(json_data, f, indent=2)

    clrscr()
    print("Configuration completed successfully. Your system info is now saved at ~/.local/share/overview-info.json")
    print("You can re-run this config anytime by issueing: mcos-about configure")
    print("For help document, please run: mcos-about help")

def normal_run():
    w = MainWindow()
    w.connect("destroy", Gtk.main_quit)
    w.show_all()
    Gtk.main()


def print_help():
    pass
command = sys.argv[0].lower()

if not os.path.exists("overview-info.json"):
    print("First time run detected. Configuration will now start.")
    command = "configure"

if command == "configure":
    start_configuration()
elif command == "help":
    print_help()
else:
    normal_run()